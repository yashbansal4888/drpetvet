{"version":3,"sources":["../../../../src/app-router/client/ClerkProvider.tsx"],"sourcesContent":["'use client';\nimport { ClerkProvider as ReactClerkProvider } from '@clerk/clerk-react';\nimport { useRouter } from 'next/navigation';\nimport React, { useEffect, useTransition } from 'react';\n\nimport { useSafeLayoutEffect } from '../../client-boundary/hooks/useSafeLayoutEffect';\nimport { ClerkNextOptionsProvider } from '../../client-boundary/NextOptionsContext';\nimport type { NextClerkProviderProps } from '../../types';\nimport { ClerkJSScript } from '../../utils/clerk-js-script';\nimport { mergeNextClerkPropsWithEnv } from '../../utils/mergeNextClerkPropsWithEnv';\nimport { invalidateCacheAction } from '../server-actions';\nimport { useAwaitablePush } from './useAwaitablePush';\nimport { useAwaitableReplace } from './useAwaitableReplace';\n\ndeclare global {\n  export interface Window {\n    __clerk_nav_await: Array<(value: void) => void>;\n    __clerk_nav: (to: string) => Promise<void>;\n    __clerk_internal_invalidateCachePromise: () => void | undefined;\n  }\n}\n\nexport const ClientClerkProvider = (props: NextClerkProviderProps) => {\n  const { __unstable_invokeMiddlewareOnAuthStateChange = true, children } = props;\n  const router = useRouter();\n  const push = useAwaitablePush();\n  const replace = useAwaitableReplace();\n  const [isPending, startTransition] = useTransition();\n\n  useEffect(() => {\n    if (!isPending) {\n      window.__clerk_internal_invalidateCachePromise?.();\n    }\n  }, [isPending]);\n\n  useSafeLayoutEffect(() => {\n    window.__unstable__onBeforeSetActive = () => {\n      /**\n       * We need to invalidate the cache in case the user is navigating to a page that\n       * was previously cached using the auth state that was active at the time.\n       *\n       *  We also need to await for the invalidation to happen before we navigate,\n       * otherwise the navigation will use the cached page.\n       *\n       * For example, if we did not invalidate the flow, the following scenario would be broken:\n       * - The middleware is configured in such a way that it redirects you back to the same page if a certain condition is true (eg, you need to pick an org)\n       * - The user has a <Link href=/> component in the page\n       * - The UB is mounted with afterSignOutUrl=/\n       * - The user clicks the Link. A nav to / happens, a 307 to the current page is returned so a navigation does not take place. The / navigation is now cached as a 307 to the current page\n       * - The user clicks sign out\n       * - We call router.refresh()\n       * - We navigate to / but its cached and instead, we 'redirect' to the current page\n       *\n       *  For more information on cache invalidation, see:\n       * https://nextjs.org/docs/app/building-your-application/caching#invalidation-1\n       */\n      return new Promise(res => {\n        window.__clerk_internal_invalidateCachePromise = res;\n        startTransition(() => {\n          //@ts-expect-error next exists on window\n          if (window.next?.version && typeof window.next.version === 'string' && window.next.version.startsWith('13')) {\n            router.refresh();\n          } else {\n            void invalidateCacheAction();\n          }\n        });\n      });\n    };\n\n    window.__unstable__onAfterSetActive = () => {\n      if (__unstable_invokeMiddlewareOnAuthStateChange) {\n        return router.refresh();\n      }\n    };\n  }, []);\n\n  const mergedProps = mergeNextClerkPropsWithEnv({\n    ...props,\n    routerPush: push,\n    routerReplace: replace,\n  });\n\n  return (\n    <ClerkNextOptionsProvider options={mergedProps}>\n      <ReactClerkProvider {...mergedProps}>\n        <ClerkJSScript router='app' />\n        {children}\n      </ReactClerkProvider>\n    </ClerkNextOptionsProvider>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,yBAAoD;AACpD,wBAA0B;AAC1B,mBAAgD;AAEhD,iCAAoC;AACpC,gCAAyC;AAEzC,6BAA8B;AAC9B,wCAA2C;AAC3C,4BAAsC;AACtC,8BAAiC;AACjC,iCAAoC;AAU7B,MAAM,sBAAsB,CAAC,UAAkC;AACpE,QAAM,EAAE,+CAA+C,MAAM,SAAS,IAAI;AAC1E,QAAM,aAAS,6BAAU;AACzB,QAAM,WAAO,0CAAiB;AAC9B,QAAM,cAAU,gDAAoB;AACpC,QAAM,CAAC,WAAW,eAAe,QAAI,4BAAc;AAEnD,8BAAU,MAAM;AA7BlB;AA8BI,QAAI,CAAC,WAAW;AACd,mBAAO,4CAAP;AAAA,IACF;AAAA,EACF,GAAG,CAAC,SAAS,CAAC;AAEd,sDAAoB,MAAM;AACxB,WAAO,gCAAgC,MAAM;AAoB3C,aAAO,IAAI,QAAQ,SAAO;AACxB,eAAO,0CAA0C;AACjD,wBAAgB,MAAM;AA1D9B;AA4DU,gBAAI,YAAO,SAAP,mBAAa,YAAW,OAAO,OAAO,KAAK,YAAY,YAAY,OAAO,KAAK,QAAQ,WAAW,IAAI,GAAG;AAC3G,mBAAO,QAAQ;AAAA,UACjB,OAAO;AACL,qBAAK,6CAAsB;AAAA,UAC7B;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAEA,WAAO,+BAA+B,MAAM;AAC1C,UAAI,8CAA8C;AAChD,eAAO,OAAO,QAAQ;AAAA,MACxB;AAAA,IACF;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,kBAAc,8DAA2B;AAAA,IAC7C,GAAG;AAAA,IACH,YAAY;AAAA,IACZ,eAAe;AAAA,EACjB,CAAC;AAED,SACE,6BAAAA,QAAA,cAAC,sDAAyB,SAAS,eACjC,6BAAAA,QAAA,cAAC,mBAAAC,eAAA,EAAoB,GAAG,eACtB,6BAAAD,QAAA,cAAC,wCAAc,QAAO,OAAM,GAC3B,QACH,CACF;AAEJ;","names":["React","ReactClerkProvider"]}