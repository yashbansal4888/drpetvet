{"version":3,"sources":["../../../../src/app-router/server/auth.ts"],"sourcesContent":["import type { AuthObject } from '@clerk/backend';\nimport type { RedirectFun } from '@clerk/backend/internal';\nimport { constants, createClerkRequest, createRedirect } from '@clerk/backend/internal';\nimport { notFound, redirect } from 'next/navigation';\n\nimport { buildClerkProps } from '../../server/buildClerkProps';\nimport { PUBLISHABLE_KEY, SIGN_IN_URL, SIGN_UP_URL } from '../../server/constants';\nimport { createGetAuth } from '../../server/createGetAuth';\nimport { authAuthHeaderMissing } from '../../server/errors';\nimport type { AuthProtect } from '../../server/protect';\nimport { createProtect } from '../../server/protect';\nimport { decryptClerkRequestData, getAuthKeyFromRequest, getHeader } from '../../server/utils';\nimport { buildRequestLike } from './utils';\n\ntype Auth = AuthObject & { protect: AuthProtect; redirectToSignIn: RedirectFun<ReturnType<typeof redirect>> };\n\nexport const auth = (): Auth => {\n  require('server-only');\n\n  const request = buildRequestLike();\n  const authObject = createGetAuth({\n    debugLoggerName: 'auth()',\n    noAuthStatusMessage: authAuthHeaderMissing(),\n  })(request);\n\n  const clerkUrl = getAuthKeyFromRequest(request, 'ClerkUrl');\n\n  const redirectToSignIn: RedirectFun<never> = (opts = {}) => {\n    const clerkRequest = createClerkRequest(request);\n    const devBrowserToken =\n      clerkRequest.clerkUrl.searchParams.get(constants.QueryParameters.DevBrowser) ||\n      clerkRequest.cookies.get(constants.Cookies.DevBrowser);\n\n    const encryptedRequestData = getHeader(request, constants.Headers.ClerkRequestData);\n    const decryptedRequestData = decryptClerkRequestData(encryptedRequestData);\n\n    return createRedirect({\n      redirectAdapter: redirect,\n      devBrowserToken: devBrowserToken,\n      baseUrl: clerkRequest.clerkUrl.toString(),\n      publishableKey: decryptedRequestData.publishableKey || PUBLISHABLE_KEY,\n      signInUrl: decryptedRequestData.signInUrl || SIGN_IN_URL,\n      signUpUrl: decryptedRequestData.signUpUrl || SIGN_UP_URL,\n    }).redirectToSignIn({\n      returnBackUrl: opts.returnBackUrl === null ? '' : opts.returnBackUrl || clerkUrl?.toString(),\n    });\n  };\n\n  const protect = createProtect({ request, authObject, redirectToSignIn, notFound, redirect });\n\n  return Object.assign(authObject, { protect, redirectToSignIn });\n};\n\nexport const initialState = () => {\n  return buildClerkProps(buildRequestLike());\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,sBAA8D;AAC9D,wBAAmC;AAEnC,6BAAgC;AAChC,uBAA0D;AAC1D,2BAA8B;AAC9B,oBAAsC;AAEtC,qBAA8B;AAC9B,mBAA0E;AAC1E,IAAAA,gBAAiC;AAI1B,MAAM,OAAO,MAAY;AAC9B,UAAQ,aAAa;AAErB,QAAM,cAAU,gCAAiB;AACjC,QAAM,iBAAa,oCAAc;AAAA,IAC/B,iBAAiB;AAAA,IACjB,yBAAqB,qCAAsB;AAAA,EAC7C,CAAC,EAAE,OAAO;AAEV,QAAM,eAAW,oCAAsB,SAAS,UAAU;AAE1D,QAAM,mBAAuC,CAAC,OAAO,CAAC,MAAM;AAC1D,UAAM,mBAAe,oCAAmB,OAAO;AAC/C,UAAM,kBACJ,aAAa,SAAS,aAAa,IAAI,0BAAU,gBAAgB,UAAU,KAC3E,aAAa,QAAQ,IAAI,0BAAU,QAAQ,UAAU;AAEvD,UAAM,2BAAuB,wBAAU,SAAS,0BAAU,QAAQ,gBAAgB;AAClF,UAAM,2BAAuB,sCAAwB,oBAAoB;AAEzE,eAAO,gCAAe;AAAA,MACpB,iBAAiB;AAAA,MACjB;AAAA,MACA,SAAS,aAAa,SAAS,SAAS;AAAA,MACxC,gBAAgB,qBAAqB,kBAAkB;AAAA,MACvD,WAAW,qBAAqB,aAAa;AAAA,MAC7C,WAAW,qBAAqB,aAAa;AAAA,IAC/C,CAAC,EAAE,iBAAiB;AAAA,MAClB,eAAe,KAAK,kBAAkB,OAAO,KAAK,KAAK,kBAAiB,qCAAU;AAAA,IACpF,CAAC;AAAA,EACH;AAEA,QAAM,cAAU,8BAAc,EAAE,SAAS,YAAY,kBAAkB,sCAAU,qCAAS,CAAC;AAE3F,SAAO,OAAO,OAAO,YAAY,EAAE,SAAS,iBAAiB,CAAC;AAChE;AAEO,MAAM,eAAe,MAAM;AAChC,aAAO,4CAAgB,gCAAiB,CAAC;AAC3C;","names":["import_utils"]}