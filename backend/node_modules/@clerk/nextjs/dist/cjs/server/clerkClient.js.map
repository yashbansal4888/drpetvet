{"version":3,"sources":["../../../src/server/clerkClient.ts"],"sourcesContent":["import type { ClerkClient } from '@clerk/backend';\nimport { createClerkClient } from '@clerk/backend';\nimport { constants } from '@clerk/backend/internal';\nimport { deprecated } from '@clerk/shared/deprecated';\n\nimport { buildRequestLike, isPrerenderingBailout } from '../app-router/server/utils';\nimport { clerkMiddlewareRequestDataStore } from './clerkMiddleware';\nimport {\n  API_URL,\n  API_VERSION,\n  DOMAIN,\n  IS_SATELLITE,\n  PROXY_URL,\n  PUBLISHABLE_KEY,\n  SDK_METADATA,\n  SECRET_KEY,\n  TELEMETRY_DEBUG,\n  TELEMETRY_DISABLED,\n} from './constants';\nimport { decryptClerkRequestData, getHeader } from './utils';\n\nconst clerkClientDefaultOptions = {\n  secretKey: SECRET_KEY,\n  publishableKey: PUBLISHABLE_KEY,\n  apiUrl: API_URL,\n  apiVersion: API_VERSION,\n  userAgent: `${PACKAGE_NAME}@${PACKAGE_VERSION}`,\n  proxyUrl: PROXY_URL,\n  domain: DOMAIN,\n  isSatellite: IS_SATELLITE,\n  sdkMetadata: SDK_METADATA,\n  telemetry: {\n    disabled: TELEMETRY_DISABLED,\n    debug: TELEMETRY_DEBUG,\n  },\n};\n\nconst createClerkClientWithOptions: typeof createClerkClient = options =>\n  createClerkClient({ ...clerkClientDefaultOptions, ...options });\n\n/**\n * @deprecated\n * This singleton is deprecated and will be removed in a future release. Please use `clerkClient()` as a function instead.\n */\nconst clerkClientSingleton = createClerkClient(clerkClientDefaultOptions);\n\n/**\n * Constructs a BAPI client that accesses request data within the runtime.\n * Necessary if middleware dynamic keys are used.\n */\nconst clerkClientForRequest = () => {\n  let requestData;\n\n  try {\n    const request = buildRequestLike();\n    const encryptedRequestData = getHeader(request, constants.Headers.ClerkRequestData);\n    requestData = decryptClerkRequestData(encryptedRequestData);\n  } catch (err) {\n    if (err && isPrerenderingBailout(err)) {\n      throw err;\n    }\n  }\n\n  // Fallbacks between options from middleware runtime and `NextRequest` from application server\n  const options = clerkMiddlewareRequestDataStore.getStore() ?? requestData;\n  if (options?.secretKey || options?.publishableKey) {\n    return createClerkClientWithOptions(options);\n  }\n\n  return clerkClientSingleton;\n};\n\ninterface ClerkClientExport extends ClerkClient {\n  (): ClerkClient;\n}\n\n// TODO SDK-1839 - Remove `clerkClient` singleton in the next major version of `@clerk/nextjs`\nconst clerkClient = new Proxy(Object.assign(clerkClientForRequest, clerkClientSingleton), {\n  get(target, prop: string, receiver) {\n    deprecated('clerkClient singleton', 'Use `clerkClient()` as a function instead.');\n\n    return Reflect.get(target, prop, receiver);\n  },\n}) as ClerkClientExport;\n\nexport { clerkClient };\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAAkC;AAClC,sBAA0B;AAC1B,wBAA2B;AAE3B,mBAAwD;AACxD,6BAAgD;AAChD,uBAWO;AACP,IAAAA,gBAAmD;AAEnD,MAAM,4BAA4B;AAAA,EAChC,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,WAAW,GAAG,eAAY,IAAI,OAAe;AAAA,EAC7C,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,aAAa;AAAA,EACb,aAAa;AAAA,EACb,WAAW;AAAA,IACT,UAAU;AAAA,IACV,OAAO;AAAA,EACT;AACF;AAEA,MAAM,+BAAyD,iBAC7D,kCAAkB,EAAE,GAAG,2BAA2B,GAAG,QAAQ,CAAC;AAMhE,MAAM,2BAAuB,kCAAkB,yBAAyB;AAMxE,MAAM,wBAAwB,MAAM;AAlDpC;AAmDE,MAAI;AAEJ,MAAI;AACF,UAAM,cAAU,+BAAiB;AACjC,UAAM,2BAAuB,yBAAU,SAAS,0BAAU,QAAQ,gBAAgB;AAClF,sBAAc,uCAAwB,oBAAoB;AAAA,EAC5D,SAAS,KAAK;AACZ,QAAI,WAAO,oCAAsB,GAAG,GAAG;AACrC,YAAM;AAAA,IACR;AAAA,EACF;AAGA,QAAM,WAAU,4DAAgC,SAAS,MAAzC,YAA8C;AAC9D,OAAI,mCAAS,eAAa,mCAAS,iBAAgB;AACjD,WAAO,6BAA6B,OAAO;AAAA,EAC7C;AAEA,SAAO;AACT;AAOA,MAAM,cAAc,IAAI,MAAM,OAAO,OAAO,uBAAuB,oBAAoB,GAAG;AAAA,EACxF,IAAI,QAAQ,MAAc,UAAU;AAClC,sCAAW,yBAAyB,4CAA4C;AAEhF,WAAO,QAAQ,IAAI,QAAQ,MAAM,QAAQ;AAAA,EAC3C;AACF,CAAC;","names":["import_utils"]}