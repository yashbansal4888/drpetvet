{"version":3,"sources":["../../../src/server/createGetAuth.ts"],"sourcesContent":["import type { AuthObject } from '@clerk/backend';\nimport { AuthStatus, constants, signedInAuthObject, signedOutAuthObject } from '@clerk/backend/internal';\nimport { decodeJwt } from '@clerk/backend/jwt';\n\nimport { withLogger } from '../utils/debugLogger';\nimport { API_URL, API_VERSION, SECRET_KEY } from './constants';\nimport { getAuthAuthHeaderMissing } from './errors';\nimport type { RequestLike } from './types';\nimport { assertTokenSignature, decryptClerkRequestData, getAuthKeyFromRequest, getCookie, getHeader } from './utils';\n\nexport const createGetAuth = ({\n  noAuthStatusMessage,\n  debugLoggerName,\n}: {\n  debugLoggerName: string;\n  noAuthStatusMessage: string;\n}) =>\n  withLogger(debugLoggerName, logger => {\n    return (req: RequestLike, opts?: { secretKey?: string }): AuthObject => {\n      if (getHeader(req, constants.Headers.EnableDebug) === 'true') {\n        logger.enable();\n      }\n\n      // When the auth status is set, we trust that the middleware has already run\n      // Then, we don't have to re-verify the JWT here,\n      // we can just strip out the claims manually.\n      const authToken = getAuthKeyFromRequest(req, 'AuthToken');\n      const authSignature = getAuthKeyFromRequest(req, 'AuthSignature');\n      const authMessage = getAuthKeyFromRequest(req, 'AuthMessage');\n      const authReason = getAuthKeyFromRequest(req, 'AuthReason');\n      const authStatus = getAuthKeyFromRequest(req, 'AuthStatus') as AuthStatus;\n      logger.debug('Headers debug', { authStatus, authMessage, authReason });\n\n      if (!authStatus) {\n        throw new Error(noAuthStatusMessage);\n      }\n\n      const encryptedRequestData = getHeader(req, constants.Headers.ClerkRequestData);\n      const decryptedRequestData = decryptClerkRequestData(encryptedRequestData);\n\n      const options = {\n        authStatus,\n        apiUrl: API_URL,\n        apiVersion: API_VERSION,\n        authMessage,\n        secretKey: opts?.secretKey || decryptedRequestData.secretKey || SECRET_KEY,\n        authReason,\n      };\n\n      logger.debug('Options debug', options);\n\n      if (authStatus === AuthStatus.SignedIn) {\n        assertTokenSignature(authToken as string, options.secretKey, authSignature);\n\n        const jwt = decodeJwt(authToken as string);\n\n        logger.debug('JWT debug', jwt.raw.text);\n\n        // @ts-expect-error - TODO @nikos: Align types\n        return signedInAuthObject(options, jwt.raw.text, jwt.payload);\n      }\n\n      return signedOutAuthObject(options);\n    };\n  });\n\nexport const getAuth = createGetAuth({\n  debugLoggerName: 'getAuth()',\n  noAuthStatusMessage: getAuthAuthHeaderMissing(),\n});\n\nexport const parseJwt = (req: RequestLike) => {\n  const cookieToken = getCookie(req, constants.Cookies.Session);\n  const headerToken = getHeader(req, 'authorization')?.replace('Bearer ', '');\n  return decodeJwt(cookieToken || headerToken || '');\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sBAA+E;AAC/E,iBAA0B;AAE1B,yBAA2B;AAC3B,uBAAiD;AACjD,oBAAyC;AAEzC,mBAA2G;AAEpG,MAAM,gBAAgB,CAAC;AAAA,EAC5B;AAAA,EACA;AACF,UAIE,+BAAW,iBAAiB,YAAU;AACpC,SAAO,CAAC,KAAkB,SAA8C;AACtE,YAAI,wBAAU,KAAK,0BAAU,QAAQ,WAAW,MAAM,QAAQ;AAC5D,aAAO,OAAO;AAAA,IAChB;AAKA,UAAM,gBAAY,oCAAsB,KAAK,WAAW;AACxD,UAAM,oBAAgB,oCAAsB,KAAK,eAAe;AAChE,UAAM,kBAAc,oCAAsB,KAAK,aAAa;AAC5D,UAAM,iBAAa,oCAAsB,KAAK,YAAY;AAC1D,UAAM,iBAAa,oCAAsB,KAAK,YAAY;AAC1D,WAAO,MAAM,iBAAiB,EAAE,YAAY,aAAa,WAAW,CAAC;AAErE,QAAI,CAAC,YAAY;AACf,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACrC;AAEA,UAAM,2BAAuB,wBAAU,KAAK,0BAAU,QAAQ,gBAAgB;AAC9E,UAAM,2BAAuB,sCAAwB,oBAAoB;AAEzE,UAAM,UAAU;AAAA,MACd;AAAA,MACA,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ;AAAA,MACA,YAAW,6BAAM,cAAa,qBAAqB,aAAa;AAAA,MAChE;AAAA,IACF;AAEA,WAAO,MAAM,iBAAiB,OAAO;AAErC,QAAI,eAAe,2BAAW,UAAU;AACtC,6CAAqB,WAAqB,QAAQ,WAAW,aAAa;AAE1E,YAAM,UAAM,sBAAU,SAAmB;AAEzC,aAAO,MAAM,aAAa,IAAI,IAAI,IAAI;AAGtC,iBAAO,oCAAmB,SAAS,IAAI,IAAI,MAAM,IAAI,OAAO;AAAA,IAC9D;AAEA,eAAO,qCAAoB,OAAO;AAAA,EACpC;AACF,CAAC;AAEI,MAAM,UAAU,cAAc;AAAA,EACnC,iBAAiB;AAAA,EACjB,yBAAqB,wCAAyB;AAChD,CAAC;AAEM,MAAM,WAAW,CAAC,QAAqB;AAvE9C;AAwEE,QAAM,kBAAc,wBAAU,KAAK,0BAAU,QAAQ,OAAO;AAC5D,QAAM,eAAc,iCAAU,KAAK,eAAe,MAA9B,mBAAiC,QAAQ,WAAW;AACxE,aAAO,sBAAU,eAAe,eAAe,EAAE;AACnD;","names":[]}