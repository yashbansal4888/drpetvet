{"version":3,"sources":["../../../src/server/buildClerkProps.ts"],"sourcesContent":["import type { Organization, Session, User } from '@clerk/backend';\nimport {\n  AuthStatus,\n  constants,\n  makeAuthObjectSerializable,\n  signedInAuthObject,\n  signedOutAuthObject,\n  stripPrivateDataFromObject,\n} from '@clerk/backend/internal';\nimport { decodeJwt } from '@clerk/backend/jwt';\n\nimport { API_URL, API_VERSION, SECRET_KEY } from './constants';\nimport type { RequestLike } from './types';\nimport { decryptClerkRequestData, getAuthKeyFromRequest, getHeader, injectSSRStateIntoObject } from './utils';\n\ntype BuildClerkPropsInitState = { user?: User | null; session?: Session | null; organization?: Organization | null };\n\n/**\n * To enable Clerk SSR support, include this object to the `props`\n * returned from `getServerSideProps`. This will automatically make the auth state available to\n * the Clerk components and hooks during SSR, the hydration phase and CSR.\n * @example\n * import { getAuth } from '@clerk/nextjs/server';\n *\n * export const getServerSideProps = ({ req }) => {\n *   const { authServerSideProps } = getAuth(req);\n *   const myData = getMyData();\n *\n *   return {\n *     props: { myData, authServerSideProps },\n *   };\n * };\n */\ntype BuildClerkProps = (req: RequestLike, authState?: BuildClerkPropsInitState) => Record<string, unknown>;\n\nexport const buildClerkProps: BuildClerkProps = (req, initState = {}) => {\n  const authStatus = getAuthKeyFromRequest(req, 'AuthStatus');\n  const authToken = getAuthKeyFromRequest(req, 'AuthToken');\n  const authMessage = getAuthKeyFromRequest(req, 'AuthMessage');\n  const authReason = getAuthKeyFromRequest(req, 'AuthReason');\n\n  const encryptedRequestData = getHeader(req, constants.Headers.ClerkRequestData);\n  const decryptedRequestData = decryptClerkRequestData(encryptedRequestData);\n\n  const options = {\n    secretKey: decryptedRequestData.secretKey || SECRET_KEY,\n    apiUrl: API_URL,\n    apiVersion: API_VERSION,\n    authStatus,\n    authMessage,\n    authReason,\n  };\n\n  let authObject;\n  if (!authStatus || authStatus !== AuthStatus.SignedIn) {\n    authObject = signedOutAuthObject(options);\n  } else {\n    const jwt = decodeJwt(authToken as string);\n\n    // @ts-expect-error - TODO @nikos: Align types\n    authObject = signedInAuthObject(options, jwt.raw.text, jwt.payload);\n  }\n\n  const sanitizedAuthObject = makeAuthObjectSerializable(stripPrivateDataFromObject({ ...authObject, ...initState }));\n  return injectSSRStateIntoObject({}, sanitizedAuthObject);\n};\n"],"mappings":"AACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,iBAAiB;AAE1B,SAAS,SAAS,aAAa,kBAAkB;AAEjD,SAAS,yBAAyB,uBAAuB,WAAW,gCAAgC;AAsB7F,MAAM,kBAAmC,CAAC,KAAK,YAAY,CAAC,MAAM;AACvE,QAAM,aAAa,sBAAsB,KAAK,YAAY;AAC1D,QAAM,YAAY,sBAAsB,KAAK,WAAW;AACxD,QAAM,cAAc,sBAAsB,KAAK,aAAa;AAC5D,QAAM,aAAa,sBAAsB,KAAK,YAAY;AAE1D,QAAM,uBAAuB,UAAU,KAAK,UAAU,QAAQ,gBAAgB;AAC9E,QAAM,uBAAuB,wBAAwB,oBAAoB;AAEzE,QAAM,UAAU;AAAA,IACd,WAAW,qBAAqB,aAAa;AAAA,IAC7C,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,MAAI;AACJ,MAAI,CAAC,cAAc,eAAe,WAAW,UAAU;AACrD,iBAAa,oBAAoB,OAAO;AAAA,EAC1C,OAAO;AACL,UAAM,MAAM,UAAU,SAAmB;AAGzC,iBAAa,mBAAmB,SAAS,IAAI,IAAI,MAAM,IAAI,OAAO;AAAA,EACpE;AAEA,QAAM,sBAAsB,2BAA2B,2BAA2B,EAAE,GAAG,YAAY,GAAG,UAAU,CAAC,CAAC;AAClH,SAAO,yBAAyB,CAAC,GAAG,mBAAmB;AACzD;","names":[]}