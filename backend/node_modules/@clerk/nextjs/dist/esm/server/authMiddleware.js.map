{"version":3,"sources":["../../../src/server/authMiddleware.ts"],"sourcesContent":["import type { AuthObject } from '@clerk/backend';\nimport type { AuthenticateRequestOptions, ClerkRequest } from '@clerk/backend/internal';\nimport { AuthStatus, constants, createClerkRequest, createRedirect } from '@clerk/backend/internal';\nimport { isDevelopmentFromSecretKey } from '@clerk/shared/keys';\nimport { eventMethodCalled } from '@clerk/shared/telemetry';\nimport type { NextFetchEvent, NextMiddleware, NextRequest } from 'next/server';\nimport { NextResponse } from 'next/server';\n\nimport { isRedirect, mergeResponses, serverRedirectWithAuth, setHeader, stringifyHeaders } from '../utils';\nimport { withLogger } from '../utils/debugLogger';\nimport { clerkClient } from './clerkClient';\nimport { createAuthenticateRequestOptions } from './clerkMiddleware';\nimport { PUBLISHABLE_KEY, SECRET_KEY, SIGN_IN_URL, SIGN_UP_URL } from './constants';\nimport { informAboutProtectedRouteInfo, receivedRequestForIgnoredRoute } from './errors';\nimport { errorThrower } from './errorThrower';\nimport type { RouteMatcherParam } from './routeMatcher';\nimport { createRouteMatcher } from './routeMatcher';\nimport type { NextMiddlewareReturn } from './types';\nimport {\n  apiEndpointUnauthorizedNextResponse,\n  assertKey,\n  decorateRequest,\n  redirectAdapter,\n  setRequestHeadersOnNextResponse,\n} from './utils';\n\n/**\n * The default ideal matcher that excludes the _next directory (internals) and all static files,\n * but it will match the root route (/) and any routes that start with /api or /trpc.\n */\nexport const DEFAULT_CONFIG_MATCHER = ['/((?!.+\\\\.[\\\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'];\n\n/**\n * Any routes matching this path will be ignored by the middleware.\n * This is the inverted version of DEFAULT_CONFIG_MATCHER.\n */\nexport const DEFAULT_IGNORED_ROUTES = [`/((?!api|trpc))(_next.*|.+\\\\.[\\\\w]+$)`];\n/**\n * Any routes matching this path will be treated as API endpoints by the middleware.\n */\nexport const DEFAULT_API_ROUTES = ['/api/(.*)', '/trpc/(.*)'];\n\ntype IgnoredRoutesParam = Array<RegExp | string> | RegExp | string | ((req: NextRequest) => boolean);\ntype ApiRoutesParam = IgnoredRoutesParam;\n\ntype WithExperimentalClerkUrl<T> = T & {\n  /**\n   * When a NextJs app is hosted on a platform different from Vercel\n   * or inside a container (Netlify, Fly.io, AWS Amplify, docker etc),\n   * req.url is always set to `localhost:3000` instead of the actual host of the app.\n   *\n   * The `authMiddleware` uses the value of the available req.headers in order to construct\n   * and use the correct url internally. This url is then exposed as `experimental_clerkUrl`,\n   * intended to be used within `beforeAuth` and `afterAuth` if needed.\n   */\n  experimental_clerkUrl: NextRequest['nextUrl'];\n};\n\ntype BeforeAuthHandler = (\n  req: WithExperimentalClerkUrl<NextRequest>,\n  evt: NextFetchEvent,\n) => NextMiddlewareReturn | false | Promise<false>;\n\ntype AfterAuthHandler = (\n  auth: AuthObject & { isPublicRoute: boolean; isApiRoute: boolean },\n  req: WithExperimentalClerkUrl<NextRequest>,\n  evt: NextFetchEvent,\n) => NextMiddlewareReturn;\n\ntype AuthMiddlewareParams = AuthenticateRequestOptions & {\n  /**\n   * A function that is called before the authentication middleware is executed.\n   * If a redirect response is returned, the middleware will respect it and redirect the user.\n   * If false is returned, the auth middleware will not execute and the request will be handled as if the auth middleware was not present.\n   */\n  beforeAuth?: BeforeAuthHandler;\n  /**\n   * A function that is called after the authentication middleware is executed.\n   * This function has access to the auth object and can be used to execute logic based on the auth state.\n   */\n  afterAuth?: AfterAuthHandler;\n  /**\n   * A list of routes that should be accessible without authentication.\n   * You can use glob patterns to match multiple routes or a function to match against the request object.\n   * Path patterns and regular expressions are supported, for example: `['/foo', '/bar(.*)'] or `[/^\\/foo\\/.*$/]`\n   * The sign in and sign up URLs are included by default, unless a function is provided.\n   * For more information, see: https://clerk.com/docs\n   */\n  publicRoutes?: RouteMatcherParam;\n  /**\n   * A list of routes that should be ignored by the middleware.\n   * This list typically includes routes for static files or Next.js internals.\n   * For improved performance, these routes should be skipped using the default config.matcher instead.\n   */\n  ignoredRoutes?: IgnoredRoutesParam;\n  /**\n   * A list of routes that should be treated as API endpoints.\n   * When user is signed out, the middleware will return a 401 response for these routes, instead of redirecting the user.\n   *\n   * If omitted, the following heuristics will be used to determine an API endpoint:\n   * - The route path is ['/api/(.*)', '/trpc/(.*)'],\n   * - or the request has `Content-Type` set to `application/json`,\n   * - or the request method is not one of: `GET`, `OPTIONS` ,` HEAD`\n   *\n   * @default undefined\n   */\n  apiRoutes?: ApiRoutesParam;\n  /**\n   * Enables extra debug logging.\n   */\n  debug?: boolean;\n};\n\nexport interface AuthMiddleware {\n  (params?: AuthMiddlewareParams): NextMiddleware;\n}\n\n/**\n * @deprecated `authMiddleware` is deprecated and will be removed in the next major version.\n * Use {@link clerkMiddleware}` instead.\n * Migration guide: https://clerk.com/docs/upgrade-guides/core-2/nextjs\n */\nconst authMiddleware: AuthMiddleware = (...args: unknown[]) => {\n  const [params = {}] = args as [AuthMiddlewareParams?];\n  const publishableKey = assertKey(params.publishableKey || PUBLISHABLE_KEY, () =>\n    errorThrower.throwMissingPublishableKeyError(),\n  );\n  const secretKey = assertKey(params.secretKey || SECRET_KEY, () => errorThrower.throwMissingPublishableKeyError());\n  const signInUrl = params.signInUrl || SIGN_IN_URL;\n  const signUpUrl = params.signUpUrl || SIGN_UP_URL;\n\n  const options = { ...params, publishableKey, secretKey, signInUrl, signUpUrl };\n\n  const isIgnoredRoute = createRouteMatcher(options.ignoredRoutes || DEFAULT_IGNORED_ROUTES);\n  const isPublicRoute = createRouteMatcher(withDefaultPublicRoutes(options.publicRoutes));\n  const isApiRoute = createApiRoutes(options.apiRoutes);\n  const defaultAfterAuth = createDefaultAfterAuth(isPublicRoute, isApiRoute, options);\n\n  clerkClient.telemetry.record(\n    eventMethodCalled('authMiddleware', {\n      publicRoutes: Boolean(options.publicRoutes),\n      ignoredRoutes: Boolean(options.ignoredRoutes),\n      beforeAuth: Boolean(options.beforeAuth),\n      afterAuth: Boolean(options.afterAuth),\n    }),\n  );\n\n  return withLogger('authMiddleware', logger => async (_req: NextRequest, evt: NextFetchEvent) => {\n    if (options.debug) {\n      logger.enable();\n    }\n    const clerkRequest = createClerkRequest(_req);\n    const nextRequest = withNormalizedClerkUrl(clerkRequest, _req);\n\n    logger.debug('URL debug', {\n      url: nextRequest.nextUrl.href,\n      method: nextRequest.method,\n      headers: stringifyHeaders(nextRequest.headers),\n      nextUrl: nextRequest.nextUrl.href,\n      clerkUrl: nextRequest.experimental_clerkUrl.href,\n    });\n\n    logger.debug('Options debug', { ...options, beforeAuth: !!options.beforeAuth, afterAuth: !!options.afterAuth });\n\n    if (isIgnoredRoute(nextRequest)) {\n      logger.debug({ isIgnoredRoute: true });\n      if (isDevelopmentFromSecretKey(options.secretKey) && !options.ignoredRoutes) {\n        console.warn(\n          receivedRequestForIgnoredRoute(\n            nextRequest.experimental_clerkUrl.href,\n            JSON.stringify(DEFAULT_CONFIG_MATCHER),\n          ),\n        );\n      }\n      return setHeader(NextResponse.next(), constants.Headers.AuthReason, 'ignored-route');\n    }\n\n    const beforeAuthRes = await (options.beforeAuth && options.beforeAuth(nextRequest, evt));\n\n    if (beforeAuthRes === false) {\n      logger.debug('Before auth returned false, skipping');\n      return setHeader(NextResponse.next(), constants.Headers.AuthReason, 'skip');\n    } else if (beforeAuthRes && isRedirect(beforeAuthRes)) {\n      logger.debug('Before auth returned redirect, following redirect');\n      return setHeader(beforeAuthRes, constants.Headers.AuthReason, 'before-auth-redirect');\n    }\n\n    const requestState = await clerkClient.authenticateRequest(\n      clerkRequest,\n      createAuthenticateRequestOptions(clerkRequest, options),\n    );\n\n    const locationHeader = requestState.headers.get('location');\n    if (locationHeader) {\n      // triggering a handshake redirect\n      return new Response(null, { status: 307, headers: requestState.headers });\n    }\n\n    if (requestState.status === AuthStatus.Handshake) {\n      throw new Error('Clerk: unexpected handshake without redirect');\n    }\n\n    const auth = Object.assign(requestState.toAuth(), {\n      isPublicRoute: isPublicRoute(nextRequest),\n      isApiRoute: isApiRoute(nextRequest),\n    });\n\n    logger.debug(() => ({ auth: JSON.stringify(auth), debug: auth.debug() }));\n    const afterAuthRes = await (options.afterAuth || defaultAfterAuth)(auth, nextRequest, evt);\n    const finalRes = mergeResponses(beforeAuthRes, afterAuthRes) || NextResponse.next();\n    logger.debug(() => ({ mergedHeaders: stringifyHeaders(finalRes.headers) }));\n\n    if (isRedirect(finalRes)) {\n      logger.debug('Final response is redirect, following redirect');\n      return serverRedirectWithAuth(clerkRequest, finalRes, options);\n    }\n\n    if (options.debug) {\n      setRequestHeadersOnNextResponse(finalRes, nextRequest, { [constants.Headers.EnableDebug]: 'true' });\n      logger.debug(`Added ${constants.Headers.EnableDebug} on request`);\n    }\n\n    const result = decorateRequest(clerkRequest, finalRes, requestState, { secretKey }) || NextResponse.next();\n\n    if (requestState.headers) {\n      requestState.headers.forEach((value, key) => {\n        result.headers.append(key, value);\n      });\n    }\n\n    return result;\n  });\n};\n\nexport { authMiddleware };\n\nconst createDefaultAfterAuth = (\n  isPublicRoute: ReturnType<typeof createRouteMatcher>,\n  isApiRoute: ReturnType<typeof createApiRoutes>,\n  options: { signInUrl: string; signUpUrl: string; publishableKey: string; secretKey: string },\n) => {\n  return (auth: AuthObject, req: WithExperimentalClerkUrl<NextRequest>) => {\n    if (!auth.userId && !isPublicRoute(req)) {\n      if (isApiRoute(req)) {\n        informAboutProtectedRoute(req.experimental_clerkUrl.pathname, options, true);\n        return apiEndpointUnauthorizedNextResponse();\n      } else {\n        informAboutProtectedRoute(req.experimental_clerkUrl.pathname, options, false);\n      }\n      return createRedirect({\n        redirectAdapter,\n        signInUrl: options.signInUrl,\n        signUpUrl: options.signUpUrl,\n        publishableKey: options.publishableKey,\n        // We're setting baseUrl to '' here as we want to keep the legacy behavior of\n        // the redirectToSignIn, redirectToSignUp helpers in the backend package.\n        baseUrl: '',\n      }).redirectToSignIn({ returnBackUrl: req.experimental_clerkUrl.href });\n    }\n    return NextResponse.next();\n  };\n};\n\nconst matchRoutesStartingWith = (path: string) => {\n  path = path.replace(/\\/$/, '');\n  return new RegExp(`^${path}(/.*)?$`);\n};\n\nconst withDefaultPublicRoutes = (publicRoutes: RouteMatcherParam | undefined) => {\n  if (typeof publicRoutes === 'function') {\n    return publicRoutes;\n  }\n\n  const routes = [publicRoutes || ''].flat().filter(Boolean);\n  // TODO: refactor it to use common config file eg SIGN_IN_URL from ./clerkClient\n  // we use process.env for now to support testing\n  const signInUrl = process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL || '';\n  if (signInUrl) {\n    routes.push(matchRoutesStartingWith(signInUrl));\n  }\n  // TODO: refactor it to use common config file eg SIGN_UP_URL from ./clerkClient\n  // we use process.env for now to support testing\n  const signUpUrl = process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL || '';\n  if (signUpUrl) {\n    routes.push(matchRoutesStartingWith(signUpUrl));\n  }\n  return routes;\n};\n\n// - Default behavior:\n//    If the route path is `['/api/(.*)*', '*/trpc/(.*)']`\n//    or Request has `Content-Type: application/json`\n//    or Request method is not-GET,OPTIONS,HEAD,\n//    then this is considered an API route.\n//\n// - If the user has provided a specific `apiRoutes` prop in `authMiddleware` then all the above are discarded,\n//   and only routes that match the user’s provided paths are considered API routes.\nconst createApiRoutes = (\n  apiRoutes: RouteMatcherParam | undefined,\n): ((req: WithExperimentalClerkUrl<NextRequest>) => boolean) => {\n  if (apiRoutes) {\n    return createRouteMatcher(apiRoutes);\n  }\n  const isDefaultApiRoute = createRouteMatcher(DEFAULT_API_ROUTES);\n  return (req: WithExperimentalClerkUrl<NextRequest>) =>\n    isDefaultApiRoute(req) || isRequestMethodIndicatingApiRoute(req) || isRequestContentTypeJson(req);\n};\n\nconst isRequestContentTypeJson = (req: NextRequest): boolean => {\n  const requestContentType = req.headers.get(constants.Headers.ContentType);\n  return requestContentType === constants.ContentTypes.Json;\n};\n\nconst isRequestMethodIndicatingApiRoute = (req: NextRequest): boolean => {\n  const requestMethod = req.method.toLowerCase();\n  return !['get', 'head', 'options'].includes(requestMethod);\n};\n\nconst withNormalizedClerkUrl = (\n  clerkRequest: ClerkRequest,\n  nextRequest: NextRequest,\n): WithExperimentalClerkUrl<NextRequest> => {\n  const res = nextRequest.nextUrl.clone();\n  res.port = clerkRequest.clerkUrl.port;\n  res.protocol = clerkRequest.clerkUrl.protocol;\n  res.host = clerkRequest.clerkUrl.host;\n  return Object.assign(nextRequest, { experimental_clerkUrl: res });\n};\n\nconst informAboutProtectedRoute = (\n  path: string,\n  options: AuthMiddlewareParams & { secretKey: string },\n  isApiRoute: boolean,\n) => {\n  if (options.debug || isDevelopmentFromSecretKey(options.secretKey)) {\n    console.warn(\n      informAboutProtectedRouteInfo(\n        path,\n        !!options.publicRoutes,\n        !!options.ignoredRoutes,\n        isApiRoute,\n        DEFAULT_IGNORED_ROUTES,\n      ),\n    );\n  }\n};\n"],"mappings":"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","names":[]}